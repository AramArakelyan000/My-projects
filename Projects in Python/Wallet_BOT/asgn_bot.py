import telebot
from telebot import types
import sqlite3
import schedule
import time

WAITING_FOR_PAYMENT_PHOTO = 'waiting_for_payment_photo'
WAITING_FOR_WITHDRAW_AMOUNT = 'waiting_for_withdraw_amount'
WAITING_FOR_WALLET_ADDRESS = 'waiting_for_wallet_address'
user_states = {'state': None, 'wallet_address': None}
bot = telebot.TeleBot('6984946591:AAEtgf37fGKJEQkwMMyPhGsbaqa-o3MINFk')

markup = types.InlineKeyboardMarkup()
markup.add(types.InlineKeyboardButton('üí∏–ö–æ—à–µ–ª–µ–∫', callback_data='my_coins'))
markup.add(types.InlineKeyboardButton('üì•–ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫', callback_data='button_2'))
markup.add(types.InlineKeyboardButton('ü™ô–¢–∞—Ä–∏—Ñ 1', callback_data='button_3'))
markup.add(types.InlineKeyboardButton('üßæ–û –ø—Ä–æ–µ–∫—Ç–µ', callback_data='button_4'))
markup.add(types.InlineKeyboardButton('üìä–ú–æ–∏ —Ç–∞—Ä–∏—Ñ—ã', callback_data='my_tariffs'))  

markup1 = types.InlineKeyboardMarkup()
markup1.add(types.InlineKeyboardButton('–ö—É–ø–∏—Ç—å', callback_data='buy'))

markup2 = types.InlineKeyboardMarkup()
markup2.add(types.InlineKeyboardButton('üì§–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤', callback_data='withdraw'))
markup2.add(types.InlineKeyboardButton('üí≥–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫–æ—à–µ–ª—å–µ–∫', callback_data='kosh'))

def get_user_purchased_tariffs(user_id):
    with sqlite3.connect('basa.sql') as conn:
        cur = conn.cursor()
        cur.execute('SELECT tariff_name FROM purchased_tariffs WHERE user_id=?', (user_id,))
        result = cur.fetchall()
    return [tariff[0] for tariff in result] if result else []

def daily_earnings():
    with sqlite3.connect('basa.sql') as conn:
        cur = conn.cursor()
        cur.execute("SELECT user_id FROM users WHERE tarif1_end_date >= DATE('now')")
        users_tarif1 = cur.fetchall()

        for user_id in users_tarif1:
            current_points = get_user_points(user_id[0])
            set_user_points(user_id[0], current_points + 0.7)

def start_daily_earnings():
    schedule.every().day.at("00:00").do(daily_earnings)

    while True:
        schedule.run_pending()
        time.sleep(1)

def get_user_points(user_id):
    with sqlite3.connect('basa.sql') as conn:
        cur = conn.cursor()
        cur.execute('SELECT coins FROM users WHERE user_id=?', (user_id,))
        result = cur.fetchone()
    return result[0] if (result and result[0] is not None) else 0

def set_user_points(user_id, coins):
    try:
        conn = sqlite3.connect('basa.sql', check_same_thread=False)
        cur = conn.cursor()

        cur.execute('UPDATE users SET coins=? WHERE user_id=?', (coins, user_id))
        conn.commit()

    finally:
        conn.close()

@bot.message_handler(commands=['start'])

def start(message):
    user_id = message.from_user.id
    user_states[user_id] = None
    with sqlite3.connect('basa.sql') as conn:
        cur = conn.cursor()
        cur.execute('CREATE TABLE IF NOT EXISTS users (user_id INTEGER PRIMARY KEY, coins INTEGER DEFAULT 0, wallet_address TEXT)')
        cur.execute('CREATE TABLE IF NOT EXISTS payments (user_id INTEGER, photo_id TEXT)')
        cur.execute('CREATE TABLE IF NOT EXISTS payment_photos (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, photo_id TEXT)')
        cur.execute('CREATE TABLE IF NOT EXISTS withdrawal_requests (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, amount REAL)')
        cur.execute('CREATE TABLE IF NOT EXISTS purchased_tariffs (user_id INTEGER, tariff_name TEXT)')
        conn.commit()

        cur.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        user_data = cur.fetchone()

        if not user_data:
            cur.execute("INSERT INTO users (user_id) VALUES (?)", (user_id,))
            conn.commit()
            bot.send_message(message.chat.id, f'id {user_id} –≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ')
            coins = 0
        else:
            coins = user_data[1]

    bot.send_message(message.chat.id, '''

    –ö–∞–∫ —á–∞—Å—Ç—å ASGN Incorporated, –Ω–∞—à –ø—Ä–æ–µ–∫—Ç –≤–æ–ø–ª–æ—â–∞–µ—Ç –≤ —Å–µ–±–µ –º–∏—Å—Å–∏—é –∫–æ–º–ø–∞–Ω–∏–∏ - —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∏ –ø—Ä–∏–≤–Ω–µ—Å–µ–Ω–∏–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–π –≤ –±–∏–∑–Ω–µ—Å-–º–∏—Ä. –ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è –∫ —Ç–æ–º—É, —á—Ç–æ–±—ã –Ω–∞—à –ø—Ä–æ–µ–∫—Ç —Å—Ç–∞–ª –Ω–µ–æ—Ç—ä–µ–º–ª–µ–º–æ–π —á–∞—Å—Ç—å—é —É—Å–ø–µ—Ö–∞ ASGN Incorporated.''')
    bot.send_message(message.chat.id, f'id {user_id}: –ë–∞–ª–∞–Ω—Å: {coins} USDT', reply_markup=markup)

    cur.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    user_id = call.from_user.id

    if call.data == 'my_coins':
        coins = get_user_points(user_id)
        bot.send_message(call.message.chat.id, f'–ë–∞–ª–∞–Ω—Å: {coins} USDT', reply_markup=markup2)

    elif call.data == 'kosh':
        user_states[user_id] = WAITING_FOR_WALLET_ADDRESS
        bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ USDT(TRC-20):')
        with sqlite3.connect('basa.sql', check_same_thread=False) as conn:
            cur = conn.cursor()
            cur.execute("INSERT INTO purchased_tariffs (user_id, tariff_name) VALUES (?, ?)", (user_id, '–¢–∞—Ä–∏—Ñ 1'))
            conn.commit()

    elif call.data == 'withdraw':
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–≤—è–∑–∞–Ω –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—à–µ–ª–µ–∫
        with sqlite3.connect('basa.sql') as conn:
            cur = conn.cursor()
            cur.execute('SELECT wallet_address FROM users WHERE user_id=?', (user_id,))
            wallet_address = cur.fetchone()

            if wallet_address and wallet_address[0]:  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫
                coins = get_user_points(user_id)
                if coins < 10:
                    bot.send_message(call.message.chat.id, '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ - 10 USDT. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å.')
                else:
                    user_states[user_id] = WAITING_FOR_WITHDRAW_AMOUNT
                    bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (–Ω–µ –º–µ–Ω–µ–µ 10 USDT) –ö–æ–º–∏—Å—Å–∏—è: 10%:')
            else:
                bot.send_message(call.message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–≤—è–∂–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫.')
    elif call.data == 'my_tariffs':
        # Add logic to retrieve and display purchased tariffs for the user
        # You can query your database for this information and send it as a message.
        # Example:
        purchased_tariffs = get_user_purchased_tariffs(user_id)
        if purchased_tariffs:
            tariffs_message = "–í–∞—à–∏ –∫—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:\n"
            for tariff in purchased_tariffs:
                tariffs_message += f"{tariff}\n"
            bot.send_message(call.message.chat.id, tariffs_message)
        else:
            bot.send_message(call.message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤.')

    elif call.data == 'button_2':
        user_states[user_id] = WAITING_FOR_PAYMENT_PHOTO
        bot.send_message(call.message.chat.id, '''
<b>–í–ê–ñ–ù–û! –°–õ–ï–î–£–ô–¢–ï –°–¢–†–û–ì–û –ü–û –ò–ù–°–¢–†–£–ö–¶–ò–ò.</b>
–ü–û–°–õ–ï –ü–û–ü–û–õ–ù–ï–ù–ò–Ø –î–ï–ù–¨–ì–ò –ù–ê –ë–ê–õ–ê–ù–° –ù–ê–ß–ò–°–õ–Ø–¢–°–Ø –í –¢–ï–ß–ï–ù–ò–ò 5 –ß–ê–°–û–í

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –≤ –ª—é–±–æ–º —Ä–∞–∑–º–µ—Ä–µ –Ω–∞ –∫–æ—à–µ–ª–µ–∫‚¨áÔ∏è\n <code>TMbYmyhnVCvXjvg6bjzAiERpE7kUavg3mT</code> –ü–û –°–ï–¢–ò TRC-20(Tron)

–ü–æ—Å–ª–µ —á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã —Ç—É—Ç

<i>–ï—Å–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∏ –Ω–∞ –≤–∞—à —Å—á–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 5 —á–∞—Å–æ–≤, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π (—Å—Å—ã–ª–∫—É –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –±–æ—Ç–∞)</i>
''', parse_mode='HTML')

    elif call.data == 'button_3':
        bot.send_message(call.message.chat.id, '–¢–∞—Ä–∏—Ñ 1. –¶–µ–Ω–∞ 10 USDT\n–°—É—Ç–æ—á–Ω—ã–π –¥–æ—Ö–æ–¥ 7% ~ 0.7 USDT\n–¶–∏–∫–ª 60 –¥–Ω–µ–π', reply_markup=markup1)

    elif call.data == 'buy':
        conn = sqlite3.connect('basa.sql')
        cur = conn.cursor()
        user_id = call.from_user.id
        coins = get_user_points(user_id)
        conn.commit()
        conn.close()

        if coins >= 10:
            current_points = get_user_points(user_id)
            set_user_points(user_id, current_points - 10)
            with sqlite3.connect('basa.sql', check_same_thread=False) as conn:
                cur = conn.cursor()
                cur.execute("INSERT INTO purchased_tariffs (user_id, tariff_name) VALUES (?, ?)", (user_id, '–¢–∞—Ä–∏—Ñ 1'))
                conn.commit()
                bot.send_message(call.message.chat.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ —Ç–∞—Ä–∏—Ñ 1', reply_markup=markup)
        else:
            bot.send_message(call.message.chat.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫!', reply_markup=markup)

    elif call.data == 'button_4':
        bot.send_message(call.message.chat.id, '''
<b>ASGN Incorporated</b> - –Ω–æ–≤—ã–π –≤–∏—Ç–æ–∫ –≤ –Ω–∞—à–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—é—â–µ–º—Å—è –ø–æ—Ä—Ç—Ñ–µ–ª–µ –ø—Ä–æ–µ–∫—Ç–æ–≤! –ú—ã —Å –≥–æ—Ä–¥–æ—Å—Ç—å—é –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤–∞–º —Å–≤–µ–∂–∏–π –≤–∑–≥–ª—è–¥ –Ω–∞ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏ –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.

–ö–∞–∫ —á–∞—Å—Ç—å <b>ASGN Incorporated</b>, –Ω–∞—à –ø—Ä–æ–µ–∫—Ç –≤–æ–ø–ª–æ—â–∞–µ—Ç –≤ —Å–µ–±–µ –º–∏—Å—Å–∏—é –∫–æ–º–ø–∞–Ω–∏–∏ - —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∏ –ø—Ä–∏–≤–Ω–µ—Å–µ–Ω–∏–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–π –≤ –±–∏–∑–Ω–µ—Å-–º–∏—Ä. –ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è –∫ —Ç–æ–º—É, —á—Ç–æ–±—ã –Ω–∞—à –ø—Ä–æ–µ–∫—Ç —Å—Ç–∞–ª –Ω–µ–æ—Ç—ä–µ–º–ª–µ–º–æ–π —á–∞—Å—Ç—å—é —É—Å–ø–µ—Ö–∞ <b>ASGN Incorporated</b>.

–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞–º, –∏ –º—ã –æ–±–µ—Å–ø–µ—á–∏–º –≤–∞—Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –æ–ø—ã—Ç–æ–º –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–µ—Å–µ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –≤—ã–≥–æ–¥—É, –Ω–æ –∏ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ –æ—Ç —É—á–∞—Å—Ç–∏—è –≤ –Ω–æ–≤–∞—Ç–æ—Ä—Å–∫–æ–º –ø—Ä–æ–µ–∫—Ç–µ <b>ASGN Incorporated</b>. –ë—É–¥—É—â–µ–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è, –∞ –≤–∞—à–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è - –∫–ª—é—á –∫ –µ–≥–æ –±–ª–µ—Å—Ç—è—â–µ–º—É —Ä–∞–∑–≤–∏—Ç–∏—é!
''', parse_mode='HTML')

@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    user_id = message.from_user.id
    conn = sqlite3.connect('basa.sql')
    cur = conn.cursor()

    if message.photo and user_states.get(user_id) == WAITING_FOR_PAYMENT_PHOTO:
        file_id = message.photo[-1].file_id
        cur.execute("INSERT INTO payment_photos (user_id, photo_id) VALUES (?, ?)", (user_id, file_id))
        conn.commit()

        bot.send_message(message.chat.id, '–°–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏–Ω—è—Ç. –û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.', reply_markup=markup)

        user_states[user_id] = None
    else:
        bot.send_message(message.chat.id, '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫" –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.', reply_markup=markup)

@bot.message_handler(commands=['give_points'])
def give_points(message):
    admin_user_id = 925238030
    user_id = message.from_user.id

    if user_id != admin_user_id:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split()[1:]
    if len(args) != 2 or not args[0].isdigit() or not args[1].isdigit():
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º: /give_points <user_id> <amount>")
        return

    target_user_id = int(args[0])
    amount = int(args[1])

    current_points = get_user_points(target_user_id)
    set_user_points(target_user_id, current_points + amount)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(target_user_id, f'–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω {amount} USDT')

    bot.send_message(message.chat.id, f"–û—á–∫–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_points + amount}")


@bot.message_handler(commands=['view_photos'])
def view_photos(message):
    admin_user_id = 925238030
    user_id = message.from_user.id

    if user_id != admin_user_id:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    conn = sqlite3.connect('basa.sql')
    cur = conn.cursor()

    cur.execute("SELECT user_id, photo_id FROM payment_photos")
    photos = cur.fetchall()

    if photos:
        for photo in photos:
            bot.send_photo(message.chat.id, photo[1], caption=f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {photo[0]}")
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.")

    conn.close()

@bot.message_handler(commands=['admin_view_users'])
def admin_view_users(message):
    admin_user_id = 925238030
    user_id = message.from_user.id

    if user_id != admin_user_id:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    conn = sqlite3.connect('basa.sql')
    cur = conn.cursor()

    cur.execute("SELECT user_id, coins FROM users")
    users = cur.fetchall()

    total_users = len(users)  # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    if users:
        users_info = "\n".join([f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user[0]}: {user[1]} USDT" for user in users])  
        bot.send_message(message.chat.id, f" {users_info}\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    conn.close()

@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == WAITING_FOR_WITHDRAW_AMOUNT)
def handle_withdraw_amount(message):
    user_id = message.from_user.id

    try:
        coins = get_user_points(user_id)
        withdraw_amount = float(message.text)
        
        if withdraw_amount < 10:
            bot.send_message(message.chat.id, '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ - 10 USDT. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞–Ω–æ–≤–æ:')
        elif withdraw_amount > coins:
            bot.send_message(message.chat.id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.')
        else:    
            current_points = get_user_points(user_id)
            
            conn = sqlite3.connect('basa.sql', check_same_thread=False)
            cur = conn.cursor()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            cur.execute("INSERT INTO withdrawal_requests (user_id, amount) VALUES (?, ?)", (user_id, withdraw_amount))
            conn.commit()

            # –£–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            set_user_points(user_id, current_points - withdraw_amount)

            conn.close()

            bot.send_message(message.chat.id, f'–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ {withdraw_amount} USDT –ø—Ä–∏–Ω—è—Ç. –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.')
            user_states[user_id] = None

    except ValueError:
        bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞–Ω–æ–≤–æ:')



@bot.message_handler(commands=['admin_view_wallets'])
def admin_view_wallets(message):
    admin_user_id = 925238030
    user_id = message.from_user.id

    if user_id != admin_user_id:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    conn = sqlite3.connect('basa.sql')
    cur = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥
    cur.execute("SELECT DISTINCT user_id FROM withdrawal_requests")
    users_withdrawal_requests = cur.fetchall()

    if not users_withdrawal_requests:
        bot.send_message(message.chat.id, "–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ –≤—ã–≤–æ–¥.")
        return

    users_info = ""
    for user in users_withdrawal_requests:
        user_id = user[0]
        cur.execute("SELECT wallet_address FROM users WHERE user_id = ?", (user_id,))
        wallet_address = cur.fetchone()

        if wallet_address:
            cur.execute("SELECT amount FROM withdrawal_requests WHERE user_id = ?", (user_id,))
            withdrawal_amount = cur.fetchone()
            withdrawal_amount = withdrawal_amount[0] if withdrawal_amount else 0
            users_info += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –ö–æ—à–µ–ª–µ–∫ - {wallet_address[0]}, –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ - {withdrawal_amount} USDT\n"

    if users_info:
        bot.send_message(message.chat.id, users_info)
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ –≤—ã–≤–æ–¥.")

    conn.close()


@bot.message_handler(func=lambda message: user_states.get(message.from_user.id) == WAITING_FOR_WALLET_ADDRESS)
def handle_wallet_address(message):

    user_id = message.from_user.id
    wallet_address = message.text

    # –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        conn = sqlite3.connect('basa.sql', check_same_thread=False)
        cur = conn.cursor()
        cur.execute('UPDATE users SET wallet_address=? WHERE user_id=?', (wallet_address, user_id))
        conn.commit()
        conn.close()

        bot.send_message(message.chat.id, f'–ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω: {wallet_address}', reply_markup=markup)
        user_states[user_id] = None  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–∏
    except Exception as e:
        bot.send_message(message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∫–æ—à–µ–ª—å–∫–∞: {e}', reply_markup=markup)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot.polling(none_stop=True, interval=0)

    # –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    daily_earnings_thread = threading.Thread(target=start_daily_earnings)
    daily_earnings_thread.start()